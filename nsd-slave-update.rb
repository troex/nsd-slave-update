#!/usr/bin/env ruby
#
# This script fetch DNS zones from remote URL and update nsd config files for slave zones
# Author: Troex Nevelin <troex@fury.scancode.ru>

require 'open-uri'

@config = [
  # ['1.2.3.4', false, 'single-domain.tld'],
  # ['5.6.7.8', 'http://URL/slave-list.txt']
]
@nsd_zone_chown = [107, 109]
@nsd_zone_mask = '/etc/nsd3/slave/%s/%s'
@nsd_ixfr = '/var/lib/nsd3/ixfr.db'
@nsd_patch = '/usr/sbin/nsdc patch'
@nsd_restart = '/usr/sbin/service nsd3 restart'
@nsd_config = '/etc/nsd3/nsd.conf'
@nsd_config_header = <<END
## this file is auto-generated by nsd-slave-update, any changes will be discard
## generated: %s

server:
	logfile: "/var/lib/nsd3/nsd.log"
END
@nsd_zone_template = <<END
zone:
	name: "%s"
	zonefile: "%s"
	allow-notify: 127.0.0.1 NOKEY
	allow-notify: %s NOKEY
	request-xfr: %s NOKEY
END

require './config.rb'

@old_zones = []
@new_zones = {}

def check_ixfr
  if File.exist?(@nsd_ixfr)
    puts 'Patching database'
    system @nsd_patch
  end
end

def read_config
  puts 'Reading config %s' % @nsd_config
  File.open(@nsd_config) do |file|
    while (line = file.gets)
      if m = /^[\t\s]+name:\s"(.*)"$/.match(line)
        @old_zones.push(m[1])
      end
    end
  end
end

def get_zones
  puts 'Getting zones'
  @config.each do |c|
    master = c[0]
    url = c[1]
    # if zone
    if !url
      zone = c[2]
      @new_zones[zone] = master
      puts 'zone %s (%s)' % [zone, master]
      next
    end
    # else if fetch zones from URL
    puts 'Fetching zones from %s' % url
    open(url) do |file|
      while (line = file.gets)
        line.chomp!
        next if line[0] == '#' or line.length < 6 or !/^[\w\-\.]+$/.match(line)
        zone = line
        @new_zones[zone] = master
        puts 'zone %s (%s)' % [zone, master]
      end
    end
  end
end

def update_nsd
  puts 'Update config'
  nsd_config_new = @nsd_config_header % Time.now.utc.to_s
  @new_zones.sort.each do |zone, master|
    zonefile = @nsd_zone_mask % [master, zone]
    nsd_config_new += @nsd_zone_template % [zone, zonefile, master, master]
    if !File.exist?(zonefile)
      File.open(zonefile, 'w')
      File.chown(@nsd_zone_chown[0], @nsd_zone_chown[1], zonefile)
    end
  end
  File.open(@nsd_config + '.new', 'w') do |file|
    file.puts nsd_config_new
  end
  File.rename(@nsd_config + '.new', @nsd_config)
  system @nsd_restart
end

check_ixfr()
read_config()
get_zones()

diff_new = @new_zones.keys - @old_zones # new domains arrived
diff_old = @old_zones - @new_zones.keys # old domains removed

# exit if nothing to do
exit 0 if diff_new.empty? and diff_old.empty?

update_nsd()
# TODO clean_old()
